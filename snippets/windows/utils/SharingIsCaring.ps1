# ░▒▓ SharingIsCaring.ps1 ▓▒░
#
# Massive SMB shares downloader used to test for data exposure in local networks
#
# Example:
#   C:\> powershell -exec bypass .\SharingIsCaring.ps1 -FileName hosts.txt

[CmdletBinding()]

Param(
    [Parameter(Mandatory=$true)]
    [String] $FileName,
    [String[]] $ExcludeShares = @("IPC$", "print$", "SYSVOL"),
    [Int] $ThrottleLimit = 16,
    [Int] $Timeout = 1800
)

$HostNames = Get-Content $FileName

$StartTime = Get-Date

$RunspaceTimers = [HashTable]::Synchronized(@{})
$Runspaces = New-Object -TypeName System.Collections.ArrayList
$RunspaceCounter = 1

$ISS = [System.Management.Automation.Runspaces.InitialSessionState]::CreateDefault()
$ISS.Variables.Add(
    (New-Object -TypeName System.Management.Automation.Runspaces.SessionStateVariableEntry -ArgumentList 'RunspaceTimers', $RunspaceTimers, '')
)

$RunspacePool = [System.Management.Automation.Runspaces.RunspaceFactory]::CreateRunspacePool(1, $ThrottleLimit, $ISS, $Host)
$RunspacePool.Open()

$ShareCopyBlock =
{
    [CmdletBinding()]
    Param(
        [int] $ID,
        [string] $CopySrc,
        [string] $CopyDst
    )
    $RunspaceTimers.$ID = Get-Date
    New-Item -Path $CopyDst -Type Directory -ErrorAction SilentlyContinue
    Copy-Item -Path $CopySrc -Destination $CopyDst -Force -Recurse -ErrorAction SilentlyContinue
}

function Get-Result
{
    [CmdletBinding()]
    Param(
        [switch] $Wait
    )
    do
    {
        $More = $false
        foreach ($Runspace in $Runspaces) {
            $StartTime = $RunspaceTimers[$Runspace.ID]
            if ($Runspace.Handle.IsCompleted)
            {
                $Runspace.PowerShell.EndInvoke($Runspace.Handle)
                $Runspace.PowerShell.Dispose()
                $Runspace.PowerShell = $null
                $Runspace.Handle = $null
            }
            elseif ($null -ne $Runspace.Handle)
            {
                $More = $true
            }
            if ($Timeout -and $StartTime)
            {
                if ((New-TimeSpan -Start $StartTime).TotalSeconds -ge $Timeout -and $Runspace.PowerShell) {
                    Write-Warning -Message ('Timeout {0}' -f $Runspace.IObject)
                    $Runspace.PowerShell.Dispose()
                    $Runspace.PowerShell = $null
                    $Runspace.Handle = $null
                }
            }
        }
        if ($More -and $PSBoundParameters['Wait'])
        {
            Start-Sleep -Milliseconds 100
        }
        foreach ($Thread in $Runspaces.Clone())
        {
            if (-not $Thread.Handle) {
                $Runspaces.Remove($Thread)
            }
        }
    }
    while ($More -and $PSBoundParameters['Wait'])
}

Write-Verbose -Message "$(Get-Date): Downloading shares..."

foreach ($HostName in $HostNames)
{
    Get-Result
    $RunspaceCounter++
    Write-Host "$(Get-Date): Checking $HostName"
    $NetView = net view \\$HostName /all
    if ($NetView) {
        $FromLine = ($NetView | Select-String -Pattern "---" | Select-Object LineNumber).LineNumber
        $NetView[$FromLine..($NetView.count - 3)] | ForEach-Object {
            $ShareLine = $_ -split "\s{2,}"
            $Share = $ShareLine[0]
            if ($ExcludeShares -NotContains $Share) {
                $CopySrc = "\\$HostName\$Share\*"
                $CopyDst = "$(Get-Location)\$HostName\$Share\"
                $Snippet = [System.Management.Automation.PowerShell]::Create().AddScript($ShareCopyBlock)
                [void] $Snippet.AddParameter('ID', $RunspaceCounter)
                [void] $Snippet.AddParameter('CopySrc', $CopySrc)
                [void] $Snippet.AddParameter('CopyDst', $CopyDst)
                $Snippet.RunspacePool = $RunspacePool
                [void]$Runspaces.Add(@{
                    Handle = $Snippet.BeginInvoke()
                    PowerShell = $Snippet
                    ID = $RunspaceCounter
                })
            }
        }
    }
}

Get-Result -Wait
Write-Progress -Activity 'Processing' -Status 'Done' -Completed
$RunspacePool.Close()
$RunspacePool.Dispose()