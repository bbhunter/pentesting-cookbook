#!/usr/bin/env python3

import click
import sys


class Convert:

    pass


class XOR(Convert):

    def __init__(self, data, is_list):
        self.data = self.parse(data, is_list)

    def to_dec(self, val):
        return int(val)

    def to_hex(self, val):
        return int(val, 16)

    def parse(self, val, is_list):
        if is_list:
            val = val.split(b',')
            func = self.to_hex if b'x' in val[0] else self.to_dec
            val = [func(c) for c in val]
        else:
            val = list(val)
        return val

    def convert(self, key):
        key = self.parse(key, True)
        klen = len(key)
        xored = [self.data[i] ^ key[i % klen] for i in range(0, len(self.data))]
        return xored


@click.command()
@click.option('--data', '-d', type=str, required=False, help='Data argument, reads from stdin if not provided')
@click.option('--key', '-k', type=str, required=True, help='Key as comma separated list of hex or decimal values')
@click.option('--is-list', '-l', default=False, is_flag=True, help='Treat data as comma separated list of hex or decimal values')
@click.option('--truncate', '-t', default=1000, help='Truncate screen output by number of characters')
@click.option('--output', '-o', type=str, required=False, help='Save output to file')
def run(data, key, is_list, truncate, output):
    if data is None:
        data = sys.stdin.buffer.read()
    else:
        data = data.encode(sys.stdin.encoding)
    xor = XOR(data, is_list)
    xored = xor.convert(key.encode(sys.stdin.encoding))
    int_output = ','.join([str(c) for c in xored[:truncate]])
    hex_output = ','.join([hex(c) for c in xored[:truncate]])
    click.echo(click.style('Int: ' + int_output + ' [...]', fg='green', bold=True))
    click.echo(click.style('Hex: ' + hex_output + ' [...]', fg='yellow', bold=True))
    click.echo('Length: ' + str(len(xor.data)))
    if output is not None:
        with open(output, 'wb') as fil:
            fil.write(bytes(xored))
        click.echo('Output saved to: ' + output)


if __name__ == '__main__':
    run()
