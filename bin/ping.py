#!/usr/bin/env python3

import asyncio
import concurrent.futures
import random

import click
import netaddr
from scapy import all as scp


def scan(ip, timeout, ttl):
    packet = scp.IP(dst=str(ip), ttl=ttl) / scp.ICMP()
    result = scp.sr1(packet, timeout=timeout, verbose=0)
    if not (result is None):
        click.echo(click.style('Host {} seems up!'.format(packet[scp.IP].dst), fg='green', bold=True))
    else:
        click.echo(click.style('Host {} timed out.'.format(packet[scp.IP].dst), fg='red'))


@click.command()
@click.option('--ip-range', '-i', type=str, required=True, help='IP address range (CIDR)')
@click.option('--timeout', '-t', type=int, default=1, help='Timeout')
@click.option('--randomize', '-r', is_flag=True, default=False, help='Random order')
@click.option('--ttl', '-l', type=int, default=64, help='TTL')
@click.option('--workers', '-w', type=int, default=4, help='Number of workers (16 suggested as maximum)')
def run(ip_range, timeout, randomize, ttl, workers):
    ip_list = list(netaddr.IPNetwork(ip_range).iter_hosts())
    if randomize:
        random.shuffle(ip_list)
    executor = concurrent.futures.ThreadPoolExecutor(max_workers=workers)
    loop = asyncio.get_event_loop()
    loop.run_until_complete(asyncio.gather(
        *[loop.run_in_executor(executor, scan, ip, timeout, ttl) for ip in ip_list]
    ))


if __name__ == '__main__':
    run()
