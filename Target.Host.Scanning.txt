`` Service discovery

    `` Basic

        -- Basic approach, assume all hosts are up
        ~$ nmap -sS -Pn -n -v -iL VAR_TARGET_FILE

        -- Another run this time with SYN scan
        ~$ nmap -sS -Pn -n -v -iL VAR_TARGET_FILE

    `` More intense, full port range

        -- In case the network might be monitored, light versioning, medium speed
        ~$ nmap -Pn -n -v -p- -sV --version-light -T3 -iL VAR_TARGET_FILE

        -- In case the network is not monitored, full service and OS discovery, higher speed
        ~$ nmap -Pn -n -v -p- -sV -O -T4 -iL VAR_TARGET_FILE

    `` Stealthy

        -- Scanning large network and trying to avoid detection, top ports, something between T3/T4, one host and probe at a time
        ~$ nmap -Pn -n -v --top-ports=800 --max-rtt-timeout=2000ms --min-rtt-timeout=300ms --initial-rtt-timeout=500ms --max-retries=2 --host-timeout=15m --max-parallelism=1 --max-hostgroup=1 -iL VAR_TARGET_FILE

    `` Scanning over a SOCKS proxy

        ~$ proxychains -q nmap -sT -Pn -n -v VAR_TARGET_CIDR

    `` Targeting SNMP

        ~$ nmap -sU --open -p161 VAR_TARGET_CIDR

    `` Looking for Windows services

        ~$ nmap -v -p139,445 VAR_TARGET_CIDR

    `` Looking for anonymous FTP logins

        ~$ nmap -v -p21 --script ftp-anon VAR_TARGET_CIDR

    `` PowerShell

        `` With simple range-based port scanning

            >$ 1..254 | % { $a = $_; 1..1024 | % {echo ((new-object Net.Sockets.TcpClient).Connect("192.168.1.$a",$_)) "Port $_ is open!"} 2>$null}

        `` With simple list-based port scanning

            >$ 1..254 | % { $a = $_; write-host "------"; write-host "192.168.1.$a"; 22,53,80,445 | % {echo ((new-object Net.Sockets.TcpClient).Connect("192.168.1.$a",$_)) "Port $_ is open!"} 2>$null}

`` TCP

    ~$ hping3 -S -8 1-65535 VAR_TARGET_HOST | grep -v 'Not responding'
    ~$ hping3 -S -c 3 -s 53 -p 80 VAR_TARGET_HOST
    ~$ nmap -sS -Pn -v -n --top-ports 500 VAR_TARGET_HOST
    ~$ nmap -T4 -Pn -sT -n -v --top-ports 2500 VAR_TARGET_HOST
    ~$ proxychains -q nmap -T4 -Pn -sT -A -n -v --top-ports 2500 VAR_TARGET_HOST
    ~$ nc -vvn -w 1 -z VAR_TARGET_HOST 1-65535
    ~$ unicornscan -H -msf -Iv VAR_TARGET_HOST -p 1-65535

`` UDP

    ~$ nmap -nv -sU -sV -Pn -p- --reason --stats-every 60s --max-rtt-timeout=150ms --max-retries=1 VAR_TARGET_HOST
    ~$ nc -nnvu -w 1 -z VAR_TARGET_HOST 1-65535
    ~$ unicornscan -H -mU -Iv VAR_TARGET_HOST -p 1-65535

`` Fingerprinting

    ~$ amap -A VAR_TARGET_HOST VAR_TARGET_PORT
    ~$ nmap -A -sV -Pn -n -v VAR_TARGET_HOST -p VAR_TARGET_PORT
    ~$ nmap -A -sV -Pn -n -v --version-all VAR_TARGET_HOST -p VAR_TARGET_PORT

`` Stealthy

    `` Firewall bypassing

        ~$ nmap -T4 -sS -v -Pn -g 443 -n --top-ports 1500 VAR_TARGET_HOST

    `` Bypassing Windows IPsec filter

        ~$ nmap -sS -v -v -Pn -g 88 -O -A -p- VAR_TARGET_HOST

    `` Using zombies

        ~$ nmap -T2 --packet-trace -D RND,RND,RND,RND,RND,ME -Pn -v -sI VAR_ZOMBIE_HOST:443 --data-length -f --mtu 24 VAR_TARGET_HOST

    `` FTP bounce scanning

        ~$ nmap -b VAR_FTP_HOST -P0 -g 88 -n -v -sV -A --top-ports 500 VAR_TARGET_HOST

`` Scripts

    `` PowerShell

        @ snippets/windows/utils/PortScanning.ps1

    `` Port knocking

        ~$ for x in 7000 8000 9000; do nmap -Pn --host-timeout 201 --max-retries 0 -p $x VAR_TARGET_HOST; done
